default:
    @just --list

alias r := run-debug
alias rr := run-release
alias pv := print-viewkey
alias b := build-debug
alias br := build-release
alias be := build-elf
alias f := fmt
alias c := clean

# Bash: fail if using undefined vars

set shell := ["bash", "-c"]
set quiet := true
set dotenv-path := "../.env"

env-settings := "../../.env"
sp1up-path := shell("which sp1up")
cargo-prove-path := shell("which cargo-prove")

# Install SP1 tooling & other initial setup
initial-config-installs:
    if ! {{ path_exists(sp1up-path) }}; then \
        curl -L https://sp1.succinct.xyz | bash; \
    fi; \
    echo "✅ sp1up installed"; \
    if ! {{ path_exists(cargo-prove-path) }}; then \
        {{ sp1up-path }}; \
    else \
        echo -e "✅ cargo-prove installed\n     ⚠️👀NOTE: Check you have the correct version needed for this project!"; \
    fi

# Build only the zkVM ELF program in release mode (optimized)
build-elf:
    if ! {{ path_exists(cargo-prove-path) }}; then \
        echo -e "⛔ Missing zkVM Compiler.\nRun \`just initial-config-installs\` to prepare your environment"; \
        exit 1; \
    fi; \
    source {{ env-settings }}; \
    if [ ! -f "$ZK_PROGRAM_ELF_PATH" ]; then \
        echo -e "Can't find ELF at \`$ZK_PROGRAM_ELF_PATH\`.\nAttempting to build it..."; \
        RUSTFLAGS="-Copt-level=3 -Clto=fat -Ccodegen-units=1 -Cdebuginfo=1 -Cembed-bitcode=yes" cargo prove build -p chacha-program; \
    else \
        echo "✅ RELEASE - ELF Exists, skipping SP1 build"; \
    fi


# Build only the zkVM ELF program using sp1 docker (bitwise identical ELFs)
build-elf-reproducible:
    if ! {{ path_exists(cargo-prove-path) }}; then \
        echo -e "⛔ Missing zkVM Compiler.\nRun \`just initial-config-installs\` to prepare your environment"; \
        exit 1; \
    fi; \
    source {{ env-settings }}; \
    if [ ! -f "$ZK_PROGRAM_REPRODUCIBLE_ELF_PATH" ]; then \
        echo -e "Can't find ELF at \`$ZK_PROGRAM_REPRODUCIBLE_ELF_PATH\`.\nAttempting to build it..."; \
        RUSTFLAGS="-Copt-level=3 -Clto=fat -Ccodegen-units=1 -Cdebuginfo=1 -Cembed-bitcode=yes" \
        echo -e "\n******\nNOTE: the first run will download an sp1 docker image ~5GB\ncheck network usage if you are not seeing any progress on this step...\n******\n"; \
        RUSTFLAGS="-Copt-level=3 -Clto=fat -Ccodegen-units=1 -Cdebuginfo=1 -Cembed-bitcode=yes" cargo prove build --docker -p chacha-program; \
    else \
        echo "✅ REPRODUCIBLE - ELF Exists, skipping SP1 build"; \
    fi


# Run the proxy in release mode with debug logs
run-release *FLAGS: build-elf
    RUST_LOG=pda_proxy=debug cargo r -r -- {{ FLAGS }}

# Run the proxy in debug mode
run-debug *FLAGS: build-elf
    # TODO: Add node healthcheck (e.g., curl local /health endpoint)
    RUST_LOG=pda_proxy=debug cargo r -- {{ FLAGS }}

# Print the zkVM program viewkey (vkey)
print-viewkey *FLAGS: build-elf
    cargo r -r --bin vkey -- {{ FLAGS }}

# Build in debug mode
build-debug: build-elf
    cargo b

# Build in release mode
build-release: build-elf
    cargo b -r

# Clean build artifacts
clean:
    cargo clean

# Format source code (Rust, Justfile, and TOMLs)
fmt:
    cargo fmt # *.rs
    just --quiet --unstable --fmt > /dev/null # justfile
    taplo format > /dev/null 2>&1 # *.toml
